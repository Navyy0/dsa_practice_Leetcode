class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        if (n == 1) {
            return matrix[0][0];
        }
   
        int[][] dp = new int[n][n];
        // Initialize the first row of dp with the first row of the matrix
        for (int j = 0; j < n; j++) {
            dp[0][j] = matrix[0][j];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Handle the leftmost column
                if (j == 0) {
                    dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j], dp[i - 1][j + 1]);
                }
                // Handle the rightmost column
                else if (j == n - 1) {
                    dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j - 1], dp[i - 1][j]);
                }
                // Handle the middle columns
                else {
                    dp[i][j] = matrix[i][j] + Math.min(Math.min(dp[i - 1][j - 1], dp[i - 1][j]), dp[i - 1][j + 1]);
                }
            }
        }

        // Find the minimum value in the last row of dp
        int minSum = dp[n - 1][0];
        for (int j = 1; j < n; j++) {
            if (dp[n - 1][j] < minSum) {
                minSum = dp[n - 1][j];
            }
        }

        return minSum;
    }
}
