import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length <= 1) {
            return intervals;
        }

        // Sort intervals by start time (using Arrays.sort for simplicity)
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> merged = new ArrayList<>();
        merged.add(intervals[0]); // Initialize with the first interval

        for (int i = 1; i < intervals.length; i++) {
            int[] last = merged.get(merged.size() - 1);
            int[] current = intervals[i];

            // Check if current interval overlaps with the last merged interval
            if (current[0] <= last[1]) {
                // Merge them by updating the end time
                last[1] = Math.max(last[1], current[1]);
            } else {
                // No overlap, add current interval to the list
                merged.add(current);
            }
        }

        return merged.toArray(new int[merged.size()][]);
    }
}
