/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head ;
        ListNode slow = head ;
        if(head == null){
            return null;
        }
        if(head.next == null){
            return null;
        }
        while(fast != null){
            if(fast.next == null){
                return null;
            }
            
            fast = fast.next.next ;
            slow = slow.next ;
            if(fast == slow){
                 slow = head; 
    
                // Phase 2: Find the first node of the loop
                while (slow != fast) {
                    // Move slow and fast one step
                    // at a time
                    slow = slow.next;  
                    fast = fast.next;  
    
                    // When slow and fast meet again,
                    // it's the first node of the loop
                }
                
                // Return the first node of the loop
                return slow;  
            }
             
        }return null ;
    }
}
