class Solution {
    int time = 0;
    class Pair {
        int first;
        int second;

        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        Queue<Pair> q = new LinkedList<>();

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    q.add(new Pair(i, j));
                }
            }
        }

        while (!q.isEmpty()) {
            int size = q.size();
            boolean rotted = false;

            for (int k = 0; k < size; k++) {
                Pair node = q.poll();
                int i = node.first;
                int j = node.second;

                if (i > 0 && grid[i - 1][j] == 1) { // Up
                    grid[i - 1][j] = 2;
                    q.add(new Pair(i - 1, j));
                    rotted = true;
                }
                if (i < m - 1 && grid[i + 1][j] == 1) { // Down
                    grid[i + 1][j] = 2;
                    q.add(new Pair(i + 1, j));
                    rotted = true;
                }
                if (j > 0 && grid[i][j - 1] == 1) { // Left
                    grid[i][j - 1] = 2;
                    q.add(new Pair(i, j - 1));
                    rotted = true;
                }
                if (j < n - 1 && grid[i][j + 1] == 1) { // Right
                    grid[i][j + 1] = 2;
                    q.add(new Pair(i, j + 1));
                    rotted = true;
                }
            }
            if (rotted) time++;
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) return -1; 
            }
        }

        return time;
    }
}
