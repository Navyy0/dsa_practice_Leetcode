
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // Handle edge case: empty tree
        if (root == null)
            return new ArrayList<>();

        // Queue for BFS traversal
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        // Result list to store levels
        List<List<Integer>> ans = new ArrayList<>();

        // Perform level-order traversal
        while (!q.isEmpty()) {
            int size = q.size(); // Number of nodes at the current level
            List<Integer> currentLevel = new ArrayList<>(); // List to store current level nodes

            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll(); // Dequeue the front node
                currentLevel.add(node.val); // Add its value to the current level

                // Enqueue left and right children (if present)
                if (node.left != null)
                    q.add(node.left);
                if (node.right != null)
                    q.add(node.right);
            }

            // Add the current level to the result
            ans.add(currentLevel);
        }

        return ans; // Return the result list
    }
}
