import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class Solution {
    private Map<TreeNode, TreeNode> parent = new HashMap<>();
    
    private void preorder(TreeNode curr, TreeNode par) {
        if (curr == null) return;
        
        parent.put(curr, par);
        preorder(curr.left, curr);
        preorder(curr.right, curr);
    }
    
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        preorder(root, null);
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(target);
        Set<TreeNode> visited = new HashSet<>();
        visited.add(target);
        
        while (!q.isEmpty() && k > 0) {
            k--;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode curr = q.poll();
                
                if (curr.left != null && !visited.contains(curr.left)) {
                    q.add(curr.left);
                    visited.add(curr.left);
                }
                if (curr.right != null && !visited.contains(curr.right)) {
                    q.add(curr.right);
                    visited.add(curr.right);
                }
                TreeNode par = parent.get(curr);
                if (par != null && !visited.contains(par)) {
                    q.add(par);
                    visited.add(par);
                }
            }
        }
        
        List<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            ans.add(q.poll().val);
        }
        return ans;
    }
}
