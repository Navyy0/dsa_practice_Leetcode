#optimal solution
class Solution {
    int total = 0;
   public int pathSum(TreeNode root, long sum) {
        if (root == null)
            return 0;
        HashMap<Long, Integer> hm = new HashMap<>();
        hm.put(0L, 1);
        findPathSum(root, 0, sum, hm);  
        return total; 
   }
    private void findPathSum(TreeNode curr, long sum, long target, HashMap<Long, Integer> hm) {
        if (curr == null)
            return;
        
        sum += curr.val;
        if(hm.containsKey(sum-target))
          total += hm.get(sum-target);
        hm.put(sum, hm.getOrDefault(sum, 0) + 1);
         findPathSum(curr.left, sum, target, hm);
         findPathSum(curr.right, sum, target, hm);
        hm.put(sum, hm.get(sum) - 1);
        return;
    }
}

# naive soluntion (n^2)

class Solution {
   
    public int pathSum(TreeNode root, long targetSum) {
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null && targetSum == root.val){
            return 1;
        }
        
        return helper(root, targetSum) + pathSum(root.left, targetSum) + pathSum(root.right, targetSum);
    }
    public int helper(TreeNode root, long target){
        if(root == null){
            return 0;
        }
        int ans = 0;
        if(target == root.val){
            ans++;
           
        }
 
        
        
        return ans + helper(root.left, target - root.val) + helper(root.right, target - root.val);
    }
}
